import { prisma } from '@/lib/prisma'
import { WhatsAppMessageService } from '@/lib/whatsapp-message'

export interface FlowStep {
  id: string
  stepOrder: number
  stepType: 'MESSAGE' | 'WAIT' | 'CONDITION' | 'ACTION'
  content?: string
  config?: any
}

export interface FlowExecution {
  id: string
  flowId: string
  conversationId: string
  status: 'PENDING' | 'RUNNING' | 'COMPLETED' | 'ERROR' | 'PAUSED'
  currentStep: number
  metadata?: any
}

export class FlowProcessor {
  private static instance: FlowProcessor
  private whatsappService: WhatsAppMessageService
  private processingQueue: Map<string, boolean> = new Map()

  private constructor() {
    this.whatsappService = WhatsAppMessageService.getInstance()
  }

  static getInstance(): FlowProcessor {
    if (!FlowProcessor.instance) {
      FlowProcessor.instance = new FlowProcessor()
    }
    return FlowProcessor.instance
  }

  // Processar uma execu√ß√£o de fluxo
  async processExecution(executionId: string) {
    // Evitar processamento duplicado
    if (this.processingQueue.get(executionId)) {
      console.log(`‚ö†Ô∏è Execu√ß√£o ${executionId} j√° est√° sendo processada`)
      return
    }

    this.processingQueue.set(executionId, true)

    try {
      console.log(`üîÑ Iniciando processamento da execu√ß√£o ${executionId}`)

      const execution = await this.getExecutionWithDetails(executionId)
      if (!execution) {
        console.log(`‚ùå Execu√ß√£o ${executionId} n√£o encontrada`)
        return
      }

      if (execution.status === 'COMPLETED' || execution.status === 'ERROR') {
        console.log(`‚ö†Ô∏è Execu√ß√£o ${executionId} j√° foi finalizada (status: ${execution.status})`)
        return
      }

      // Marcar como em execu√ß√£o
      await this.updateExecutionStatus(executionId, 'RUNNING')

      // Processar passos sequencialmente
      await this.processSteps(execution)

      console.log(`‚úÖ Execu√ß√£o ${executionId} processada com sucesso`)

    } catch (error) {
      console.error(`‚ùå Erro ao processar execu√ß√£o ${executionId}:`, error)
      await this.handleExecutionError(executionId, error)
    } finally {
      this.processingQueue.delete(executionId)
    }
  }

  // Obter execu√ß√£o com todos os detalhes necess√°rios
  private async getExecutionWithDetails(executionId: string) {
    return await prisma.flowExecution.findUnique({
      where: { id: executionId },
      include: {
        flow: {
          include: {
            steps: {
              orderBy: { stepOrder: 'asc' }
            }
          }
        },
        conversation: {
          include: {
            account: {
              select: {
                id: true,
                phoneNumber: true,
                status: true
              }
            }
          }
        }
      }
    })
  }

  // Processar todos os passos do fluxo
  private async processSteps(execution: any) {
    const steps = execution.flow.steps
    if (!steps || steps.length === 0) {
      console.log(`‚ö†Ô∏è Fluxo ${execution.flowId} n√£o possui passos`)
      await this.updateExecutionStatus(execution.id, 'COMPLETED')
      return
    }

    console.log(`üìã Processando ${steps.length} passos do fluxo "${execution.flow.name}"`)

    for (let i = execution.currentStep - 1; i < steps.length; i++) {
      const step = steps[i]
      console.log(`üìç Processando passo ${step.stepOrder}: ${step.stepType}`)

      // Atualizar passo atual
      await this.updateCurrentStep(execution.id, step.stepOrder)

      try {
        // Processar o passo espec√≠fico
        await this.processStep(execution, step)

        // Delay entre passos (se configurado)
        const delay = this.getStepDelay(step)
        if (delay > 0) {
          console.log(`‚è±Ô∏è Aguardando ${delay}ms antes do pr√≥ximo passo`)
          await this.delay(delay)
        }

      } catch (error) {
        console.error(`‚ùå Erro no passo ${step.stepOrder}:`, error)
        throw error
      }
    }

    // Marcar como completo
    await this.updateExecutionStatus(execution.id, 'COMPLETED', new Date())
    console.log(`‚úÖ Todos os passos do fluxo foram executados`)
  }

  // Processar um passo espec√≠fico
  private async processStep(execution: any, step: FlowStep) {
    switch (step.stepType) {
      case 'MESSAGE':
        await this.processMessageStep(execution, step)
        break

      case 'WAIT':
        await this.processWaitStep(execution, step)
        break

      case 'CONDITION':
        await this.processConditionStep(execution, step)
        break

      case 'ACTION':
        await this.processActionStep(execution, step)
        break

      default:
        console.warn(`‚ö†Ô∏è Tipo de passo n√£o suportado: ${step.stepType}`)
    }
  }

  // Processar passo de mensagem
  private async processMessageStep(execution: any, step: FlowStep) {
    if (!step.content) {
      console.warn(`‚ö†Ô∏è Passo de mensagem ${step.id} n√£o possui conte√∫do`)
      return
    }

    const account = execution.conversation.account
    const contactNumber = execution.conversation.contactNumber

    if (account.status !== 'CONNECTED') {
      throw new Error(`Conta WhatsApp ${account.id} n√£o est√° conectada`)
    }

    console.log(`üì§ Enviando mensagem para ${contactNumber}`)

    // Processar vari√°veis na mensagem
    const processedContent = this.processMessageVariables(step.content, execution)

    // Enviar mensagem
    const result = await this.whatsappService.sendMessage(
      account.id,
      contactNumber,
      processedContent
    )

    console.log(`‚úÖ Mensagem enviada: ${result.messageId}`)

    // Registrar na metadata da execu√ß√£o
    await this.addExecutionLog(execution.id, {
      stepId: step.id,
      stepType: 'MESSAGE',
      action: 'message_sent',
      messageId: result.messageId,
      content: processedContent,
      timestamp: new Date()
    })
  }

  // Processar passo de espera
  private async processWaitStep(execution: any, step: FlowStep) {
    const config = step.config ? JSON.parse(step.config) : {}
    const waitTime = config.waitTime || 5000 // 5 segundos por padr√£o

    console.log(`‚è≥ Aguardando ${waitTime}ms (passo de espera)`)
    await this.delay(waitTime)

    await this.addExecutionLog(execution.id, {
      stepId: step.id,
      stepType: 'WAIT',
      action: 'wait_completed',
      waitTime,
      timestamp: new Date()
    })
  }

  // Processar passo de condi√ß√£o
  private async processConditionStep(execution: any, step: FlowStep) {
    const config = step.config ? JSON.parse(step.config) : {}

    console.log(`üîç Avaliando condi√ß√£o: ${config.condition || 'nenhuma'}`)

    // Por enquanto, apenas registrar - implementar l√≥gica de condi√ß√£o depois
    await this.addExecutionLog(execution.id, {
      stepId: step.id,
      stepType: 'CONDITION',
      action: 'condition_evaluated',
      condition: config.condition,
      result: true, // Placeholder
      timestamp: new Date()
    })
  }

  // Processar passo de a√ß√£o
  private async processActionStep(execution: any, step: FlowStep) {
    const config = step.config ? JSON.parse(step.config) : {}

    console.log(`‚ö° Executando a√ß√£o: ${config.action || 'nenhuma'}`)

    // Por enquanto, apenas registrar - implementar a√ß√µes espec√≠ficas depois
    await this.addExecutionLog(execution.id, {
      stepId: step.id,
      stepType: 'ACTION',
      action: 'action_executed',
      actionType: config.action,
      timestamp: new Date()
    })
  }

  // Processar vari√°veis na mensagem
  private processMessageVariables(content: string, execution: any): string {
    let processedContent = content

    // Vari√°veis b√°sicas
    const variables = {
      '{{contact_name}}': execution.conversation.contactName || execution.conversation.contactNumber,
      '{{contact_number}}': execution.conversation.contactNumber,
      '{{flow_name}}': execution.flow.name,
      '{{current_time}}': new Date().toLocaleString('pt-BR'),
      '{{current_date}}': new Date().toLocaleDateString('pt-BR')
    }

    // Substituir vari√°veis
    for (const [variable, value] of Object.entries(variables)) {
      processedContent = processedContent.replace(new RegExp(variable, 'g'), value)
    }

    return processedContent
  }

  // Obter delay configurado para o passo
  private getStepDelay(step: FlowStep): number {
    const config = step.config ? JSON.parse(step.config) : {}
    return config.delay || 1000 // 1 segundo por padr√£o entre passos
  }

  // Delay utilit√°rio
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms))
  }

  // Atualizar status da execu√ß√£o
  private async updateExecutionStatus(executionId: string, status: string, completedAt?: Date) {
    const updateData: any = { status }
    if (completedAt) {
      updateData.completedAt = completedAt
    }

    await prisma.flowExecution.update({
      where: { id: executionId },
      data: updateData
    })
  }

  // Atualizar passo atual
  private async updateCurrentStep(executionId: string, stepOrder: number) {
    await prisma.flowExecution.update({
      where: { id: executionId },
      data: { currentStep: stepOrder }
    })
  }

  // Adicionar log na metadata da execu√ß√£o
  private async addExecutionLog(executionId: string, logEntry: any) {
    const execution = await prisma.flowExecution.findUnique({
      where: { id: executionId },
      select: { metadata: true }
    })

    let metadata = {}
    if (execution?.metadata) {
      try {
        metadata = JSON.parse(execution.metadata)
      } catch (error) {
        console.warn('Erro ao fazer parse da metadata:', error)
      }
    }

    // Adicionar log
    if (!metadata.logs) {
      metadata.logs = []
    }
    metadata.logs.push(logEntry)

    // Limitar logs para evitar crescimento excessivo
    if (metadata.logs.length > 100) {
      metadata.logs = metadata.logs.slice(-50) // Manter apenas os √∫ltimos 50
    }

    await prisma.flowExecution.update({
      where: { id: executionId },
      data: { metadata: JSON.stringify(metadata) }
    })
  }

  // Lidar com erro na execu√ß√£o
  private async handleExecutionError(executionId: string, error: any) {
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido'

    await prisma.flowExecution.update({
      where: { id: executionId },
      data: {
        status: 'ERROR',
        errorMessage: errorMessage
      }
    })

    console.error(`‚ùå Execu√ß√£o ${executionId} marcada como erro: ${errorMessage}`)
  }

  // Pausar execu√ß√£o
  async pauseExecution(executionId: string) {
    await this.updateExecutionStatus(executionId, 'PAUSED')
    console.log(`‚è∏Ô∏è Execu√ß√£o ${executionId} pausada`)
  }

  // Retomar execu√ß√£o
  async resumeExecution(executionId: string) {
    await this.updateExecutionStatus(executionId, 'PENDING')
    await this.processExecution(executionId)
    console.log(`‚ñ∂Ô∏è Execu√ß√£o ${executionId} retomada`)
  }

  // Cancelar execu√ß√£o
  async cancelExecution(executionId: string) {
    await this.updateExecutionStatus(executionId, 'ERROR')
    await this.addExecutionLog(executionId, {
      action: 'execution_cancelled',
      timestamp: new Date()
    })
    console.log(`üö´ Execu√ß√£o ${executionId} cancelada`)
  }

  // Obter estat√≠sticas do processador
  getProcessorStats() {
    return {
      activeExecutions: this.processingQueue.size,
      processingQueue: Array.from(this.processingQueue.keys())
    }
  }

  // Processar execu√ß√µes pendentes
  async processPendingExecutions() {
    try {
      const pendingExecutions = await prisma.flowExecution.findMany({
        where: {
          status: 'PENDING'
        },
        select: { id: true },
        take: 10 // Processar at√© 10 por vez
      })

      console.log(`üìã Encontradas ${pendingExecutions.length} execu√ß√µes pendentes`)

      for (const execution of pendingExecutions) {
        // Processar em paralelo mas com limite
        this.processExecution(execution.id).catch(error => {
          console.error(`‚ùå Erro ao processar execu√ß√£o ${execution.id}:`, error)
        })
      }

    } catch (error) {
      console.error('‚ùå Erro ao buscar execu√ß√µes pendentes:', error)
    }
  }
}

export const flowProcessor = FlowProcessor.getInstance()